//ANDREWJA JOB  CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID
//STEP1    EXEC ASMACLG,REGION=0M
//SYSIN    DD   *
         PRINT NOGEN
*---------------------------------------------------------------------*
* This program is used check PDS members' updated date                *
* Input : SYS1.DATASETS (dsorg=PS,recfm=FB,lrecl=100)                 *
* Output: SYS1.DATASETS.DETAILS (dsorg=PS,recfm=FB,lrecl=120)         *
* Andrew Jan 15/Mar/2005                                              *
*---------------------------------------------------------------------*
* Updated to process new form of lmd generated by the binder          *
* Andrew Jan 19/Apr/2005                                              *
*---------------------------------------------------------------------*
* Updated to specify volser for the dynamic allocation          M140512
* Andrew Jan 12/May/2014                                        M140512
*---------------------------------------------------------------------*
* Replacing JFCB with Dynamical allocation on PDS members to    M140514
* solve 'File closed without an unallocation'                   M140514
* Andrew Jan 14/May/2014                                        M140514
*---------------------------------------------------------------------*
* dealing with those members with a strange name                M170512
* Andrew Jan 12/May/2017                                        M170512
*---------------------------------------------------------------------*
* Using : instead of , between accode and addressing mode       M171113
* Andrew Jan 13/Nov/2017                                        M171113
*---------------------------------------------------------------------*
* Solving the bind date bug caused when the keyword:'5696PMB01' M200720
* was split between 2 lines                                     M200720
* Andrew Jan 20/Jul/2020                                        M200720
*---------------------------------------------------------------------*
* Solving ssid and alias bugs caused by more lmd directory      M200722
* data types                                                    M200722
* The length of R4 is the entire entry len - 12                 M200722
* Andrew Jan 22/Jul/2020                                        M200722
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
*
         PRINT OFF
         LCLA  &REG
.LOOP    ANOP                              GENERATE REGS.
R&REG    EQU   &REG
&REG     SETA  &REG+1
         AIF   (&REG LE 15).LOOP
         PRINT ON
*
*--The following are for the directory information-------*
*--------------------------------------------------------*
*
DIR_ENTRY DSECT
DIRNAME  DS    CL8
DIRTTR   DS    CL3
DIRC     DS    CL1
DIRUSR   DS    CL62
         ORG   DIRUSR
DIRVV     DS    CL1        version
DIRMM     DS    CL1        modified
DIRMOD    DS    CL1        mod
DIRCSS    DS    CL1        seconds of the current update
DIRIY2K   DS    CL1        y2k indicator of init.
DIRIYYDDD DS    CL3        packed yyddd for init.
DIRCY2K   DS    CL1        y2k indicator of the update update.
DIRCYYDDD DS    CL3        packed yyddd of the current update
DIRCHHMM  DS    CL2        hours:minutes of the current update
DIRCLINE  DS    CL2        total lines of the current update
DIRILINE  DS    CL2        total lines of the init. version.
DIRUNKWN  DS    CL2        don't know just put x'00'
DIRUSRID  DS    CL10       the user id who did the last update
          ORG
*
*------------------------------------------------*
*
PDSDIRF  CSECT
PDSDIRF  AMODE 31
         USING *,R15              setup addressibility
         STM   R14,R12,12(R13)    save parent's register
         LR    R2,R13             parent's save area pointer
         B     CMNTTAIL           skip over the remarks
*
CMNTHEAD EQU   *
         PRINT GEN                print out remarks
         DC    CL8'&SYSDATE'      compiling date
         DC    C' '
         DC    CL5'&SYSTIME'      compiling time
         DC    C'ANDREW JAN'      author
         CNOP  2,4                ensure half word boundary
         PRINT NOGEN              disable macro expansion
CMNTTAIL EQU   *

         BALR  R12,0              for easier byte calculation
         BAL   R13,76(,R12)       use R13 as base as well as savearea

         DROP  R15                avoid compiling warning

SAVREG   DS    18F                save area
         USING SAVREG,R13         setup addressibility
         ST    R2,4(,R13)         save our save area adr to parent's
         ST    R13,8(,R2)         save parent's save area to ours
*
A        USING S99RBP,RBPTR       req blk ptr dsect
B        USING S99RB,REQBLK       req blk dsect
C        USING S99RBP,RBPTR2      req blk ptr dsect
D        USING S99RB,REQBLK2      req blk dsect
*
*---MAINSTREAM------------------------------------*
*
*
        OPEN  (SEQIN,INPUT,PRINT,OUTPUT)  open files
*
SEQLOOP EQU    *
        GET    SEQIN                read a rec
        CLC    52(2,R1),=C'PO'      a partitioned dataset ?
        BNE    SEQLOOP              no, branch

        CLC    0(4,R1),=C'OMVS'     hfs files?
        BE     SEQLOOP              don't go on

        MVC    VOLSER,45(R1)        volser

        XR     R3,R3                clear
        LR     R4,R1                copy
CHKCMA  EQU   *
        CLI    0(R4),C','           any comma ?
        BE     CMAFND               yes
        CLI    0(R4),C' '           or blank  ?
        BE     CMAFND               yes
        LA     R4,1(,R4)            next byte
        LA     R3,1(,R3)            increae
        B      CHKCMA               loop

CMAFND  EQU    *
        STH    R3,NAMELEN           save the parm len
        BCTR   R3,0                 minus 1 for ex instr.
EXMVC   MVC    DYNNAME(0),0(R1)     mask for copying the file name
        EX     R3,EXMVC             really do the move
        MVC    DYNVOL,VOLSER        also set up the volser      M140512

        BAL    R6,DYN_ALLOC         dynamic allocation

        BAL    R6,OPEN_DIR          OPEN DIRECTORY
*
        B      GET_MEMBER_NAME   GO GET MEMBER NAME TO TEMP STOR.
*
FINISH  EQU    *
        BAL    R6,CLOSE_DIR         close dir
*
        B      SEQLOOP              loop till end of file
*
SEQEND  EQU    *
        CLOSE  (SEQIN,,PRINT)       close files

        B      RETURN               RETURN TO SYSTEM
*
*-------------------------------------------------------*
*
DYN_ALLOC EQU  *
** set up SVC99 request-blk
        XC      REQBLK,REQBLK       clear RB
        MVI     B.S99RBLN,REQBLKLN    set RB len
        MVI     B.S99VERB,S99VRBAL    set as allocation
        LA      R2,TUPTR001         ld adr of bg of text-unit-ptr lst
        ST      R2,B.S99TXTPP         store that adr into RB

** set up SVC99 request-blk-ptr
        LA      R2,REQBLK           load addr of RB
        ST      R2,A.S99RBPTR         store RB adr into RB ptr
        OI      A.S99RBPTR,S99RBPND   turn on high order bit

** issue SVC99
        LA     R1,RBPTR             ld adr of RB ptr for svc99
        DYNALLOC                    svc 99

        LTR    R15,R15             test if ok
        BNZ    Alloc_error         error

        BR     R6

Alloc_error    EQU   *
        ST     R15,RTNCD           save return code
        B      FINISH              halt
*
*-------------------------------------------------------*
*
*
*-------------------------------------------------------*
*
OPEN_DIR   EQU  *
         OPEN  (DIR,INPUT)
         BR    R6
*
*-------------------------------------------------------*
*
GET_MEMBER_NAME  EQU  *
*
*
ONE_MORE_BLOCK  EQU  *
*
         READ  DECB,SF,DIR,DIRAREA,256   READ A DIR. BLK.
         CHECK DECB                         CHECK
*
         LA    R3,DIRAREA            R3 LOCATE AT DIRAREA
         LH    R5,0(0,R3)            PUT LEN. COUNT TO R5
         AR    R5,R3                 GET THE LAST USED -
         BCTR  R5,0                  - ADDR. FOR BXLE
         LA    R3,2(0,R3)            SKIP THE COUNT
*
NEXT_ITEM  EQU  *
*
        CLC   0(8,R3),BINONES       END OF DIR. ?
        BE    FINISH                OK, GO BACK.
*
        XR    R4,R4                 CLEAR R4 FOR IC
        IC    R4,11(0,R3)           GET USERDATA-
        N     R4,=X'0000001F'       - LENG. IN HALFWORD (5 BITS)
        AR    R4,R4                 TRANS. TO BYTE

        BZ    PDSTXT                zero in length,branch

        CH    R4,=H'30'             text ?
        BE    PDSTXT                yes

        CH    R4,=H'4'              text ?
        BNH   PDSTXT                yes

PDSLMD  EQU   *
        BAL   R7,RDDIRLMD           read user data for lmd
*
        NI    ALOCNOK,X'FF'-L'ALOCNOK                           M170512
        BAL   R7,ALLOC_MEM          allocate member             M140514
        TM    ALOCNOK,L'ALOCNOK     test if alloc ok            M170512
        BO    ENDFILE_1             omit this member            M170512
        BAL   R7,OPEN_MEM           OPEN FILES
        B     READ_IN_MEM           GO GET MEMBER THEN PRCOESS
ENDFILE EQU   *
        BAL   R7,CLOSE_MEM          CLOSE MEMBER
        B     PRTLINE                                           M170512
ENDFILE_1 EQU   *
        MVC   BFMBR(27),=C'#unknown,        ,        ,'         M170512
        B     PRTLINE

PDSTXT  EQU   *
        BAL   R7,RDDIRTXT           read user data for text

PRTLINE EQU   *                     read user data
        PUT   PRINT,BUFFER          print out

        LA    R4,12(0,R4)           PLUS LEN. OF NAME(8)+TTR(3)+C(1)
*                                   R4 : STEP LEN. R5 : END-ADDR.
        BXLE  R3,R4,NEXT_ITEM       LOOP UNTIL REACH END-ADDR.
        B     ONE_MORE_BLOCK        GET ANOTHER DIR BLOCK
*
*--------------------------------------------------------*
*
RDDIRTXT   EQU   *
         USING DIR_ENTRY,R3       addressibility
*  clear
         MVC   BUFFER,BLANK       clear buffer
*  pds name
         LH    R2,NAMELEN         length of the name
         BCTR  R2,0               minus 1 for ex
EXMVC2   MVC   BFDSN(0),DYNNAME   print the dsn name
         EX    R2,EXMVC2          really do the move
         LA    R2,BFDSN           start of the name address
         AH    R2,NAMELEN         point to the next byte
         MVI   0(R2),C','         delimitor
         MVC   1(6,R2),VOLSER     volume name
         MVI   7(R2),C','         delimitor
*  member name
         MVC   BFMBR,DIRNAME         put the member name
         MVI   BFMBR+8,C','       delimitor
         LTR   R4,R4              chk any user data
         BZ    PUT_SKEL           no, branch
         CH    R4,=H'4'           chk any user data
         BNH   PUT_SKEL           no, branch

*  update date
         MVC   W_JULIAN,DIRCYYDDD move the packed yyddd
         MVC   W_CENTURY,DIRCY2K  19xx or 20xx
         CONVTOD CONVVAL=WORK16,TODVAL=W_TOD,DATETYPE=YYDDD
         STCKCONV STCKVAL=W_TOD,CONVVAL=WORK16,DATETYPE=YYYYMMDD
         UNPK  W_9,W_5             unpack to be in char
         MVC   BFUPDATE,W_9        move the update date
*  update time
         MVC   W_4(2),DIRCHHMM  move the packed hhmm
         MVC   W_4+2(1),DIRCSS  move the packed ss
         UNPK  W_7,W_4          unpack the hhmmss
         MVC   BFUPTIME(2),W_7  move the hh
         MVI   BFUPTIME+2,C':'  delimitor
         MVC   BFUPTIME+3(2),W_7+2  move the mm
         MVI   BFUPTIME+5,C':'  delimitor
         MVC   BFUPTIME+6(2),W_7+4  move the mm
*  current lines
         LH    R2,DIRCLINE      current # of lines
         CVD   R2,W_TOD         convert to packed decimal
         UNPK  W_7,W_TOD+4(4)   unpack
         MVC   BFSIZE,W_7+1     readable
         OI    BFSIZE+5,X'F0'   readable
*  init.  date
         MVC   W_JULIAN,DIRIYYDDD move the packed yyddd
         MVC   W_CENTURY,DIRIY2K  19xx or 20xx
         CONVTOD CONVVAL=WORK16,TODVAL=W_TOD,DATETYPE=YYDDD
         STCKCONV STCKVAL=W_TOD,CONVVAL=WORK16,DATETYPE=YYYYMMDD
         UNPK  W_9,W_5             unpack to be in char
         MVC   BFINDATE,W_9        move the update date
* by whom
         MVC   BFWHO,DIRUSRID     user id
*  init. # of lines
         LH    R2,DIRILINE      init. # of lines
         CVD   R2,W_TOD         convert to packed decimal
         UNPK  W_7,W_TOD+4(4)   unpack
         MVC   BFISZE,W_7+1     readable
         OI    BFISZE+5,X'F0'   readable
*  update vv.mm.mod
         XR    R2,R2            clear for insert
         IC    R2,DIRVV         insert
         CVD   R2,W_TOD         convert to packed decimal
         UNPK  W_7(3),W_TOD+6(2) unpack
         MVC   BFVER(2),W_7+1   move the vv
         OI    BFVER+1,X'F0'    readable
         MVI   BFVER+2,C'.'     delimitor
         IC    R2,DIRMM         insert
         CVD   R2,W_TOD         convert to packed decimal
         UNPK  W_7(3),W_TOD+6(2) unpack
         MVC   BFVER+3(2),W_7+1 move the mm
         OI    BFVER+4,X'F0'    readable
         MVI   BFVER+5,C'.'     delimitor
         IC    R2,DIRMOD        insert
         CVD   R2,W_TOD         convert to packed decimal
         UNPK  W_7(3),W_TOD+6(2) unpack
         MVC   BFVER+6(2),W_7+1 move the mm
         OI    BFVER+7,X'F0'    readable

PUT_SKEL EQU   *
         MVI   BFUPDATE+L'BFUPDATE,C',' delimitor
         MVI   BFUPTIME+8,C','          delimitor
         MVI   BFSIZE+L'BFSIZE,C','     delimitor
         MVI   BFINDATE+L'BFINDATE,C',' delimitor
         MVI   BFWHO+L'BFWHO,C','       delimitor
         MVI   BFISZE+L'BFISZE,C','     delimitor
         MVI   BFVER+L'BFVER,C','       delimitor

*
         BR    R7
*
*-------------------------------------------------------*
*
ALLOC_MEM EQU  *                                                M140514
        MVC    NAMELN2,NAMELEN      dataset name length         M140514
        MVC    DYNNAM2,DYNNAME      dataset name                M140514
        MVC    DYNVOL2,DYNVOL       also set up the volser      M140512
        MVC    DYNMBR2,0(R3)        member name                 M140512
** set up SVC99 request-blk                                     M140514
        XC      REQBLK2,REQBLK2    clear RB                     M140514
        MVI     D.S99RBLN,REQBLKLN2  set RB len                 M140514
        MVI     D.S99VERB,S99VRBAL   set as allocation          M140514
        LA      R2,TUPTR002        ld adr of bg of text-unit-ptrM140514
        ST      R2,D.S99TXTPP        store that adr into RB     M140514
** set up SVC99 request-blk-ptr                                 M140514
        LA      R2,REQBLK2          load addr of RB             M140514
        ST      R2,C.S99RBPTR        store RB adr into RB ptr   M140514
        OI      C.S99RBPTR,S99RBPND  turn on high order bit     M140514
** issue SVC99                                                  M140514
        LA     R1,RBPTR2            ld adr of RB ptr for svc99  M140514
        DYNALLOC                    svc 99                      M140514
        LTR    R15,R15              test if alloc ok            M170512
        BZR    R7                   allocated ok                M170512
        OI     ALOCNOK,L'ALOCNOK    allocated not ok            M170512
        BR     R7                   go back                     M140514
*
*-------------------------------------------------------*
*
OPEN_MEM  EQU  *
         OPEN  (INFILE,INPUT)         OPEN member to read
         BR    R7
*
*-------------------------------------------------------*
*
READ_IN_MEM EQU   *
         MVC   BFMBR,0(R3)        put the member name
         MVI   BFMBR+8,C','       delimitor
         GET   INFILE             get a record
         LR    R8,R1              save the address
         CLC   0(8,R8),=C'IEWPLMH ' different format of lmd ?
         BE    NEW_LMD             yes, new form of lmd (from binder)

         CLC   0(3,R8),=X'80FA01' keyword found?
         BNE   READ_IN_MEM        no,check next

         GET   INFILE             get this rec
         LR    R8,R1              save the address
         MVC   W_JULIAN,15(R8)    move the packed yyddd
         CLI   W_JULIAN,X'70'     determine  19xx or 20xx
         BL    YEAR2K             less than 70, treat as 20xx
         MVI   W_CENTURY,X'00'    19xx
         B     YYYYMMDD
YEAR2K   EQU   *
         MVI   W_CENTURY,X'01'    20xx not 19xx
YYYYMMDD EQU   *
         CONVTOD CONVVAL=WORK16,TODVAL=W_TOD,DATETYPE=YYDDD
         STCKCONV STCKVAL=W_TOD,CONVVAL=WORK16,DATETYPE=YYYYMMDD
         UNPK  W_9,W_5             unpack to be in char

         CLI   1(R8),X'15'        any time stamp ?
         BL    OLDSTYLE           no, branch

NEWSTYLE EQU   *
         UNPK  W_7,18(4,R8)       unpack the time
         MVC   BFDATA(8),C_Y4MMDD save date
         MVI   BFDATA+8,C','      delimiter
         MVC   BFDATA+9(2),W_7+1  hh
         MVI   BFDATA+11,C':'      delimiter
         MVC   BFDATA+12(2),W_7+3  mm
         MVI   BFDATA+14,C':'     delimiter
         MVC   BFDATA+15(2),W_7+5 ss
         MVI   BFDATA+17,C','     delimiter
         B     ENDFILE

OLDSTYLE EQU   *
         MVC   BFDATA(8),C_Y4MMDD save date
OUT_DELIM EQU  *
         MVI   BFDATA+8,C','      delimiter
         MVI   BFDATA+17,C','     delimiter
         B     ENDFILE

NEW_LMD  EQU   *
*M200720 LA    R11,4086           max. length
         LA    R11,4076           max. length                   M200720
         LA    R10,0(,R8)         look for the keyword          M200720
READ_1_REC    EQU  *                                            M200720
         CLC   0(10,R10),=C'5695PMB01 ' the binder name?        M200720
         BE    BIND_DATE          yes                           M200720
         LA    R10,1(,R10)        increase                      M200720
         BCT   R11,READ_1_REC     increase                      M200720
*                                                               M200720
* keyword not found in the 1st record                           M200720
NEW_LMDX EQU   *                                                M200720
         LA    R10,WK4K1                                        M200720
         LA    R9,4095            length                        M200720
         LA    R9,1(,R9)          make len =4096                M200720
         LR    R11,R9             copy the length               M200720
         MVCL  R10,R8             copy the record content to WK M200720
         GET   INFILE             get the next record           M200720
         LR    R8,R1              save the address              M200720
         L     R10,AWK4K2         2nd 4096 work                 M200720
         LA    R9,4095            length                        M200720
         LA    R9,1(,R9)          make len =4096                M200720
         LR    R11,R9             copy the length               M200720
         MVCL  R10,R8             copy the record content to WK M200720

         L     R11,=F'8172'       max. length (8192-20)         M200720
         LA    R10,WK4K1          look for the keyword          M200720
READ_IN_REC    EQU  *
         CLC   0(10,R10),=C'5695PMB01 ' the binder name?
         BE    BIND_DATE          yes
         LA    R10,1(,R10)        increase
         BCT   R11,READ_IN_REC    increase
*M200720 GET   INFILE             get next rec
*M200720 LR    R8,R1              save the address
         L     R8,AWK4K2          move the 2nd 4K WK to 1st WK  M200720
         B     NEW_LMDX           loop                          M200720

BIND_DATE  EQU  *
         MVC   W_JULIAN,13(R10)   move the packed yyddd
         MVI   W_CENTURY,X'01'    20xx not 19xx
         CONVTOD CONVVAL=WORK16,TODVAL=W_TOD,DATETYPE=YYDDD
         STCKCONV STCKVAL=W_TOD,CONVVAL=WORK16,DATETYPE=YYYYMMDD
         UNPK  W_9,W_5            unpack to be in char
         UNPK  W_7,16(4,R10)      unpack the time
         MVC   BFDATA(8),C_Y4MMDD save date
         MVI   BFDATA+8,C','      delimiter
         MVC   BFDATA+9(2),W_7+1  hh
         MVI   BFDATA+11,C':'      delimiter
         MVC   BFDATA+12(2),W_7+3  mm
         MVI   BFDATA+14,C':'     delimiter
         MVC   BFDATA+15(2),W_7+5 ss
         MVI   BFDATA+17,C','     delimiter
         B     ENDFILE

*
*--------------------------------------------------------*
CLOSE_MEM  EQU   *
         CLOSE INFILE             close files
         BR    R7
*
*--------------------------------------------------------*
RDDIRLMD EQU   *
         MVC   BUFFER,BLANK       clear buffer
*
         UNPK  W_7,22(4,R3)       get size of lmd 8+3+1+10
         MVC   BFSIZE,W_7         copy it
         TR    BFSIZE,H2C-C'0'    for a-f display
         MVI   BFSIZE+L'BFSIZE,C','      delimitor
*
CHKAC    EQU   *
         CH    R4,=H'24'          basic form ?
         BH    CHKAC1
         CH    R4,=H'22'          even simpler ?
         BH    CHKAC0             no
         MVI   BFAC,C'0'          ac(0)
         B     CHKAMODE
CHKAC0   EQU   *
         TM    34(R3),X'01'       ac code 8+3+1+22
         BO    ACCODE1            yes
         MVI   BFAC,C'0'          ac(0)
         B     CHKAMODE
ACCODE1  EQU   *
         MVI   BFAC,C'1'          ac(1)
         B     CHKAMODE
CHKAC1   EQU   *
         CH    R4,=H'32'          another form?
         BNE   CHKAC2
         MVI   BFAC,C'0'          ac(0)
         B     CHKAMODE
CHKAC2   EQU   *
         LR    R9,R3              copy start addr
         AR    R9,R4              plus user data len
         TM    11(R9),X'01'       ac code 8+3+1+22
         BO    ACCODE1            yes
         MVI   BFAC,C'0'          ac(0)
CHKAMODE EQU   *
*M171113 MVI   BFAC+L'BFAC,C','   delimitor
         MVI   BFAC+L'BFAC,C':'   delimitor                     M171113
         TM    31(R3),X'03'       8+3+1+19
         BO    AMODEANY           yes
         TM    31(R3),X'02'       8+3+1+19
         BO    AMODE31            yes
         MVC   BFAMRM(3),=C'A24'  amode=24
         B     CHKRMODE
AMODEANY EQU   *
         MVC   BFAMRM(3),=C'ANY'  amode=any
         B     CHKRMODE
AMODE31  EQU   *
         MVC   BFAMRM(3),=C'A31'  amode=31
CHKRMODE EQU   *
         TM    31(R3),X'10'       8+3+1+19
         BO    RMODEANY           yes,branch
         MVC   BFAMRM+3(3),=C'R24' rmode=24
         B     CHKSSID
RMODEANY EQU   *
         MVC   BFAMRM+3(3),=C'ANY' rmode=any
CHKSSID  EQU   *
         MVI   BFAMRM+L'BFAMRM,C','  delimitor
         CH    R4,=H'42'          alias & ssid ?                M200722
         BNE   CHKSSID0           no                            M200722
         CLI   44(R3),X'40'       not char?                     M200722
         BL    CHKSSID0           no, branch                    M200722
         MVC   BFALIAS,44(R3)     alias name                    M200722
         B     CHKRENT                                          M200722
CHKSSID0 EQU   *                                                M200722
         CH    R4,=H'38'          alias & ssid ?
         BL    CHKSSID1           no branch
         MVC   W_5(4),44(R3)      ssid
         UNPK  W_9,W_5            unpack
         MVC   BFSSID,W_9         copy the upacked ssid
         TR    BFSSID,H2C-C'0'    for a-f display
         MVC   BFALIAS,36(R3)     alias name
         B     CHKRENT
CHKSSID1 EQU   *
         CH    R4,=H'36'          alias & ssid ?
         BL    CHKALIAS           no branch
         MVC   W_5(4),42(R3)      ssid
         UNPK  W_9,W_5            unpack
         MVC   BFSSID,W_9         copy the upacked ssid
         TR    BFSSID,H2C-C'0'    for a-f display
         B     CHKRENT
CHKALIAS EQU   *
         CH    R4,=H'33'          only alias ?
         BL    CHKALIAS1          no branch
         MVC   BFALIAS,36(R3)     alias name
         B     CHKRENT
CHKALIAS1 EQU   *
         CH    R4,=H'32'          only alias ?
         BL    CHKSSID2           no branch
         TM    41(R3),X'80'       ssid?                         M200722
         BO    CHKSSID3                                         M200722
*M200722 MVC   BFALIAS,36(R3)     alias name
         B     CHKRENT
CHKSSID2 EQU   *
         CH    R4,=H'26'          only alias ?
         BL    CHKRENT            no branch
CHKSSID3 EQU   *                                                M200722
         MVC   W_5(4),34(R3)      ssid
         UNPK  W_9,W_5            unpack
         MVC   BFSSID,W_9         copy the upacked ssid
         TR    BFSSID,H2C-C'0'    for a-f display
         B     CHKRENT
CHKRENT  EQU   *
         MVI   BFALIAS+L'BFALIAS,C','   delimitor
         MVI   BFSSID+L'BFSSID,C','   delimitor
         TM    20(R3),X'80'           8+3+1+8  chk rn
         BNO   CHKRU                  no, may be ru
         MVC   BFRENT+2(2),=C'RN'     set as rn
CHKRU    EQU   *
         TM    20(R3),X'40'           8+3+1+8  chk rn
         BNO   CHKRF                  no, may be ru
         MVC   BFRENT+4(2),=C'RU'     set as ru
CHKRF    EQU   *
         TM    21(R3),X'01'           8+3+1+9  chk rf
         BNO   CHKOK                  no, may be rf
         MVC   BFRENT(2),=C'RF'       set as rf
CHKOK    EQU   *
         MVI   BFRENT+L'BFRENT,C','   delimitor
*
         LH    R9,NAMELEN         length of the name
         BCTR  R9,0               minus 1 for ex
EXMVC3   MVC   BFDSN(0),DYNNAME   print the dsn name
         EX    R9,EXMVC3          really do the move
         LA    R9,BFDSN           start of the name address
         AH    R9,NAMELEN         point to the next byte
         MVI   0(R9),C','         delimitor
         MVC   1(6,R9),VOLSER     volume name
         MVI   7(R9),C','         delimitor
*
         BR    R7
*
*--------------------------------------------------------*
*
CLOSE_DIR  EQU  *
         CLOSE DIR                close the dir
         BR    R6
*
*--------------------------------------------------------*
*
RETURN   EQU   *
         L     R15,RTNCD                    Load termination code
         L     R13,4(R13)
         RETURN (14,12),RC=(15)   back to caller
*
*--------------------------------------------------------*
*
         LTORG
*
*--------------------------------------------------------*
*
*
*--------------------------------------------------------*
*
DIRAREA  DS    CL256           WORK AREA FOR A 256-BYTE BLOCK OF DIR
*
BINONES  DC    8XL1'FF'        INDICATE THE END OF DIR.
*
BUFFER   DS    CL120
         ORG   BUFFER
BFMBR    DS    CL8
         DS    C
BFDATA   DS    0CL17
BFUPDATE DS    CL8
         DS    C
BFUPTIME DS    CL8
         DS    C
BFSIZE   DS    CL6
         DS    C
BFINDATE DS    0CL8
BFAC     DS    CL1
         DS    C
BFAMRM   DS    CL6
         DS    C
BFALIAS  DS    0CL8
BFWHO    DS    CL8
         DS    C
BFRENT   DS    0CL6
BFISZE   DS    CL6
         DS    C
BFSSID   DS    0CL8
BFVER    DS    CL8
         DS    C
BFDSN    DS    CL44
         DS    C
         ORG
BLANK    DS    0CL120
         DC    120C' '
*
W_TOD    DS    D                tod
*
RTNCD     DS   F                 return code
*
WORK16    DS   0F                work to convert time format
          DS    XL8              HHMMSSTHMIJU0000
W_5       DS   0CL5              5-byte field for unpk source
W_Y4MMDD  DS   0CL4              4-byte yyyymmdd after stckconv
W_CENTURY DS    CL1              x'01' means 20xx
W_JULIAN  DS    CL3              packed yyddd
          DS    F                reserved
*
W_9      DS    0CL9             9-byte field for unpk outcome
C_Y4MMDD DS    CL8              8-byte yyyymmdd in character
         DS    CL1              working byte
*
W_4      DS    CL4
W_7      DS    CL7
*
H2C      DC    C'0123456789'      for 0-9 conversion
         DC    C'ABCDEF'          for a-f conversion
*
*--------------------------------------------------------*
*
SEQIN  DCB DSORG=PS,DDNAME=SEQIN,MACRF=GL,EODAD=SEQEND
DIR    DCB DSORG=PS,DDNAME=SYSUT1,MACRF=R,RECFM=U
INFILE DCB DSORG=PS,DDNAME=SYSUT3,MACRF=GL,EODAD=ENDFILE
PRINT  DCB DSORG=PS,DDNAME=PRINT,MACRF=PM,LRECL=120
*

RBPTR     DS        F
REQBLK    DS        CL(S99RBEND-S99RB)
REQBLKLN  EQU       L'REQBLK

TUPTR001  DS        0F
          DC        A(TUDDNA1)   adr of tu for ddname
          DC        A(TUDSNA1)   adr of tu for dsname
          DC        A(TUDSSA1)   adr of tu for ds status
          DC        A(TUVOLA1)   adr of tu for volser           M140512
          DC        X'80'        ind. the last tu adr
          DC        AL3(TUCLSA1)   adr of tu to request unallocation   X
                                   when close file
TUDDNA1   DC        AL2(DALDDNAM)  tu key for ddname
          DC        AL2(1)         number of entries
          DC        AL2(8)         length of ddname
          DC        CL8'SYSUT1'    ddname

TUDSNA1 DC AL2(DALDSNAM),AL2(1)     tu key for dsname
NAMELEN DC AL2(12)                  len of the dsn
DYNNAME DS CL44                     dsname
TUDSSA1 DC AL2(DALSTATS),AL2(1),AL2(1),X'08'   shr
**                                     x'01'   old
**                                     x'02'   mod
**                                     x'04'   new
**             DALVLSER                for volume
TUVOLA1 DC AL2(DALVLSER),AL2(1)        for volume               M140512
VOLLEN  DC AL2(6)                      for volume               M140512
DYNVOL  DS CL6                         volume  serial           M140512
TUCLSA1 DC AL2(DALCLOSE),AL2(0)



RBPTR2    DS        F
REQBLK2   DS        CL(S99RBEND-S99RB)
REQBLKLN2 EQU       L'REQBLK2

TUPTR002  DS        0F                                          M140514
          DC        A(TUDDNA2)   adr of tu for ddname           M140514
          DC        A(TUDSNA2)   adr of tu for dsname           M140514
          DC        A(TUDSSA2)   adr of tu for ds status        M140514
          DC        A(TUVOLA2)   adr of tu for volser           M140514
          DC        A(TUMBRA2)   adr of tu for member name      M140514
          DC        X'80'        ind. the last tu adr           M140514
          DC        AL3(TUCLSA2)   adr of tu to request unalloC M140514X
                                   when close file              M140514
TUDDNA2   DC        AL2(DALDDNAM)  tu key for ddname            M140514
          DC        AL2(1)         number of entries            M140514
          DC        AL2(8)         length of ddname             M140514
          DC        CL8'SYSUT3'    ddname                       M140514
TUDSNA2 DC AL2(DALDSNAM),AL2(1)     tu key for dsname           M140514
NAMELN2 DC AL2(12)                  len of the dsn              M140514
DYNNAM2 DS CL44                     dsname                      M140514
TUDSSA2 DC AL2(DALSTATS),AL2(1),AL2(1),X'08'   shr              M140514
TUVOLA2 DC AL2(DALVLSER),AL2(1)     tu key for volume           M140514
VOLLEN2 DC AL2(6)                      volser length            M140514
DYNVOL2 DS CL6                         volume  serial           M140514
TUMBRA2 DC AL2(DALMEMBR),AL2(1)     tu key for pds member       M140514
MBRNLN2 DC AL2(8)                      member name length       M140514
DYNMBR2 DS CL8                         member name              M140514
TUCLSA2 DC AL2(DALCLOSE),AL2(0)                                 M140514

VOLSER  DS  CL6

FLAG    DC   X'00'             initiate as low value            M170512
        ORG  FLAG              redefine                         M170512
ALOCNOK DS   0XL(B'10000000')  ind. dyn. alloc failure          M170512

AWK4K2  DC  A(WK4K2)                                            M200720
WK4K1   DS  CL4096                                              M200720
WK4K2   DS  CL4096                                              M200720

        IEFZB4D0         gen. dect for req. blk, text unit et.
        IEFZB4D2         gen. table of quates for tu keys.

*
        END
/*
//G.PRINT   DD  DISP=SHR,DSN=SYS1.ZOS.MEMBERS
//G.SEQIN   DD  DISP=SHR,DSN=SYS1.ZOS
//L.SYSLMOD DD  DSN=ANDREWJ.SOURCE.LMD(PDSDIRF),DISP=SHR
//*.PRINT   DD  DSN=&&TEMP,DCB=(RECFM=FB,LRECL=120,BLKSIZE=27960),
//*   SPACE=(CYL,(50,50)),UNIT=SYSDA,DISP=(NEW,PASS)
//
//SORT     EXEC PGM=SORT,REGION=4096K
//SORTIN   DD DISP=(OLD,DELETE),DSN=&&TEMP
//SORTWK1  DD UNIT=SYSDA,SPACE=(CYL,(20,9))
//SORTWK2  DD UNIT=SYSDA,SPACE=(CYL,(20,9))
//SYSPRINT DD SYSOUT=*
//SYSOUT   DD SYSOUT=*
//SORTOUT  DD SYSOUT=*
//*ORTOUT  DD DISP=SHR,DSN=SYS1.ZOS.MEMBERS
//SYSIN    DD *
 SORT  FIELDS=(10,8,CH,D,19,8,CH,D,1,8,CH,A,69,44,CH,A)
 END
/*
//
